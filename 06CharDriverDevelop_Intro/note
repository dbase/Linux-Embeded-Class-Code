================================================================================
    如果驱动要注册字符设备, 则可以先创建一个新类别, 然后在新类别中为他创建对应的设备对象.
事实上, 对于单个或少量的字符设备, 完全可以用直接注册 misc设备的方式来处理. 

常见的总线和类别:
1. platform总线
   platform总线实际上并不对应任何硬件上的总线,因此又称伪总线. 由于设备模型中的驱动与设备关联
机制必须要有一条总线才能发挥作用, 对于那些没有连接在实际总线上的设备,如果想要使用这一机制,就需要
将它连接在一条假想的总线上. platform就可以起到这个作用. 
  通常,platform总线上的设备都是直接与CPU连接的底层设备. 
  使用platform总线的好处是可以将驱动和设备分离, 驱动所需的平台相关数据则在定义设备时提供, 使驱动有
更大的跨平台通用性.   

2. misc类别
   misc是内核在启动阶段注册的一个类别. 注册misc类别的同时,内核注册了一个字符设备, 占据了主设备MISC_MAJOR,
下0-255范围内的次设备号. 内核的主设备号定义在头文件<linux/major.h>

============================================

驱动开发
	1. Linux系统驱动分类
	      1.1 字符设备驱动: 以字节流为传输形式的设备
	      1.2 块设备驱动: 以数据块为传输形式的设备
	      1.3 网络设备驱动: 以数据报为传输形式的设备
	   注意: 对于字符设备和块设备的访问都可以通过文件系统;
	   	 但是,对于网络设备的访问需要通过专门的Socket来进行.
		 对于字符设备的访问是直接通过文件系统的路径来访问特定的文件,比如/mnt/cdrom;
		 对于块设备的访问是通过 VFS 来访问块设备文件;
		 对于网络设备的访问通过套接字,利用底层的网络协议栈来访问网络设备.
       2. 应用程序与驱动的交互
       	      2.1 字符设备驱动
	      	   系统通过 设备号 来区分不同的字符设备
		   Documentation/devices.txt 该文件列出本发行包中已经被使用和可以使用的主设备号.
		   可供于我们进行本地测试使用的主设备号各有15个:
		   3098 240-254 char    LOCAL/EXPERIMENTAL USE 
		   3100 240-254 block   LOCAL/EXPERIMENTAL USE		   
	      	   ----------------------------------------
		   系统当前占用的设备号
			/dev/  系统中预分配的设备
			/proc/devices/ 当前系统中已经加载的设备
		   主设备号: 用于标识设备类型,对应设备文件和设备驱动
		   次设备号: 用于标识同类型的不同设备个体,驱动程序一句该号码辨别具体操作的是那个
		             设备
	           ----------------------------------------
		   设备号的处理
			dev_t 数据类型用于定义设备号.
			typedef dev_t unsigned_int
			高12位是主设备号;低20位是次设备号.
			
			在内核 include/linux/kdev_t.h 
			  提取主设备号 : MAJOR(dev_t dev)
			  提取次设备号 : MINOR(dev_t dev)
			  合成设备号   : MKDEV(dev_t major,dev_t minor)
	   	  ----------------------------------------
		  设备号的分配方法
			1. 静态分配
			     在 Document/devices.txt 中寻找可用的主设备号
			2. 动态分配
			     在驱动模块加载的时候,临时向内核申请主设备号
	          
                  设备号的注册和注销
			fs/char_dev.c 中实现

			使用静态主设备号注册:
			int register_chrdev_region(dev_t from, unsigned count, const char *name)
			      from: 待申请起始主设备号
			      count: 待申请的设备号数目
			      name: 待申请的设备名称 /proc/devices
			      
			使用动态申请主设备号注册:
			int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count, 
			    			 const char *name);
			dev: 返回分配的主设备号
			baseminor: 希望分配到的主设备号的起始次设备号(次设备号从几开始,不一定为0)
			count: 待申请的设备号数目
			name: 待申请的设备名称 /proc/devices
			
			注意: 上面两个函数成功返回0,失败返回负值
      			 
			设备号注销: 不论怎样分配设备号,都应该在不再使用的时候释放这些设备号
			 void unregister_chrdev_region(dev_t from, unsigned count)
			      from: 待注销的起始主设备号
			      count: 待注销的设备号数目
		--------------------------------------------------------------------------    
		2.2 设备文件(设备节点)
		      1.手动创建
		      mknod filename type major minor
		           filename: 待创建的设备文件
			   type: 待创建的设备类型,通常为 c/b
			   major: 待创建文件的对应设备的主设备号
			   minor: 待创建设备文件的对应的次设备号
			   
                      EX:  mknod /dev/firstchardevdriver c 240 0
		      
		      2.脚本创建
		      使用一个简单的脚本替代insmod命令来获取内核分配的主设备号,
		      再使用动态获取的主设备号来创建设备文件.
		      
		      3.在驱动程序中创建
			  系统需要有udev的支持,对于嵌入式常用busybox自带的mdev.
			  实际上在内核中提供了一组函数,可以用来在模块加载的时候在/dev下创建
			  相应的设备节点,并在模块卸载时删除该设备节点.
			  前提: 用户空间移植了udev,或者在使用busybox的嵌入式系统中已经使能
			  busybox内嵌的mdev.
			  ----------------------------------------
			  class和device结构体:
			  include/linux/device.h 
			  class : 该结构体类型变量对应一个设备类(抽象的设备类,比如HID 
			  Human Interface Device),被创建的类存放在/sys目录下面.
			  
			  device: 该结构体类型变量对应一个设备,被创建的设备存放在/sys目录下面,
			  在加载模块时,用户空间的udev会自动响应device_create()函数,在/sys目录下
			  寻找相应的类,从而为这个设备在/dev目录下创建设备节点.

			  ----------------------------------------
			  版本问题
				在内核2.4版本中使用devfs_register()来创建设备节点;
				在内核2.6早期版本中使用class_device_register();
				现在使用class_create()创建设备类,device_create()创建设备.

		          ----------------------------------------

	       创建和注销设备类:
	       include/linux/device.h
	       driver/base/class.c
	       为驱动创建一个设备类:
	       struct class *class_create(owner, name)
	       	      owner:待创建设备类的模块拥有者
		      name:待创建设备类的名称
		      返回值:创建好的设备类的指针
	       销毁驱动对应的设备类:
	        void class_destroy(struct class *cls)
		      cls: 待销毁的设备类
		      
	      创建和销毁设备:
	       它们是内核模块导出符号,在drivers/base/core.c
	       
	       为一个设备创建对应的设备节点:
	       struct device *device_create(struct class *class, struct device *parent, dev_t devt, void *drvdata, const char *fmt, ...)
	       class:待创建的设备所属的设备类
	       parent:指向可能存在的父设备的指针
	       devt:设备号
	       drvdata:设备私有的数据指针
	       fmt:待创建的设备文件的名称
	       
	       设备销毁:
	       void device_destroy(struct class *class, dev_t devt);
	           class:待销毁的设备所属的设备类
		   devt:待销毁的设备的设备号(主,次)
			  
	      -----------------------------------------------------------------------------
	      2.3 数据结构
	      	  struct file   :  include/linux/fs.h
		  	 文件描述符,文件被打开一次就会创建一个文件描述符.
		  struct inode  :
		  	 用于记录文件物理信息,不同于struct file
			 一个文件可以对应多个struct file,但只能有一个struct inode
		  struct file_operations
		  	 它实际上是一个函数指针的集合,这些函数定义了能够对设备进行的操作.
			 这些函数指针指向驱动中的函数,每个函数完成一个特定的操作,不支持的操作
			 指针留空.
	     --------------------------------------------------------------------------------
	     2.4 字符设备驱动的注册
	     	 struct cdev  include/linux/cdev.h
		 cdev对象才代表了一个设备驱动.
		  1. 分配一个cdev对象
		     struct cdev *cdev_alloc(void);   (可以自定义一个栈空间的变量)
		        返回值: 返回内核对象分配的cdev对象指针
		  2. 初始化一个cdev对象
		     void cdev_init(struct cdev* cdev, const struct file_operations *fpos);
		     	  cdev: 待初始化的cdev的对象
			  fpos: 设备对应的操作函数集
		  3. 向内核添加cdev对象
		     int cdev_add(struct cdev *cdev, dev_t dev, unsigned count);
		         cdev: 待添加到内核的cdev对象
			 dev: 待添加到内核的设备的设备号
			 count: 待添加的设备个数
			 返回值:成功返回0,否则返回负值
		  4. 从内核注销cdev对象
		     void cdev_del(struct cdev *cdev);
		     	
	--------------------------------------------------------------------------------
	系统通过open/read/write等系统调用,实际上会根据我们要操作的设备文件的struct file信息
	来查找由内核维护的 struct char_device_struct *chrdevs[CHRDEV_MAJOR_HASH_SIZE]数组,然后
	通过对应的数据成员struct cdev *cdev 找到我们注册的设备文件操作函数.
	fs/char_dev.c 
	 static struct char_device_struct {                                                   
         	struct char_device_struct *next;                                                
		unsigned int major;                                                            
 		unsigned int baseminor;									 	int minorct;                                                                                    char name[64];                                                                                  struct cdev *cdev;              /* will die */                                            } *chrdevs[CHRDEV_MAJOR_HASH_SIZE];  
		
        当我们调用cdev_init()的时候,内核会去修改chrdevs[]数组,把cdev赋值;
	register_chrdev_region()会去修改chrdevs[]数组,填充主次设备号和设备个数等;
	当我们调用open()函数,内核会去chrdevs[]中寻找对应的设备节点,然后根据其中的信息,
	创建inode对象,然后对于每次访问设备文件会根据inode对象生成file象.
================================================================================
	多个设备的注册: SixCharDevDriver

	多个设备的私有数据:SixCharDevDriver and SevenCharDevDriver

	常见的字符操作函数:
	   1.open
	   int (*open)(struct inode *inode, struct file *filp);
	   该函数是设备上的第一个操作,并不一定要求驱动程序实现该方法,如果为NULL,
	   则设备的打开操作永远成功.
	   open方法是驱动程序用来为以后操作完成设备初始化工作的.
		1.初始化设备
		2.标明次设备号
	   2.release
	   int (*realse)(struct inode *inode, struct file *filp)
	   该函数当设备文件被关闭时调用.release也可以没有
	   又称close
		1.关闭设备
	   3.read
	   从设备中读取数据
	   4.write
	   向设备写入数据
	   读和写方法完成类似的工作.
	   read是从设备中读取数据到用户空间;
	   write是将数据从用户空间写入到设备;			
	   ***********************************
	   read和write方法的buf都是用户空间指针,它不能在内核模块中使用.内核为
	   驱动程序提供在内核空间和用户空间传递数据的方法:
	   arch/arm/include/asm/uaccess.h
	   
	   copy_to_user
	   put_user
	   copy_from_user
	   get_user	   
	   
	   5.poll
	   对应select系统调用,查询设备状态
	   6.ioctl
	    执行设备控制
	   7.mmap
	    将设备映射到进程虚拟地址空间
	   8.llseek	
            修改文件的当前读写位置,并将新的位置返回
	

