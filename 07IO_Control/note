 1.IO控制设备操作
    大多数驱动出了需要具备读写设备的能力外,还需要具备对硬件控制的能力. 比如,要求设备报告错误信息,
改变波特率,这些操作通常都需要通过 ioctl()来完成.
    int (*ioctl)(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg);
    ----------------------------------------
    1.1设备控制命令
    include/linux/ioctl.h
    cmd命令码构成:
    31----24   23---16  15---14  13---0
    设备类型   序列号   方向     数据尺寸
    
    设备类型:
     Documentation/ioctl/ioctl-numbers.txt
     最左边的一列为"幻数".
	幻数(类型):这是表明那个设备的命令,参考上述文档之后,选择. 8bits.
    
    序列号:
	控制命令字. 8bits
 
    方向:
       2bits . 代表数据传送方向.数据传送方向是从应用程序角度来看待.
       _IOC_NONE: 代表没有数据传送
       _IOC_READ: 代表从设备读取数据
       _IOC_WRITE: 代表写数据到设备
       
    数据尺寸:
      传送数据的大小. 这个值和体系结构有关, 通常是13或14bits.
    ----------------------------------------
    1.2定义ioctl命令码操作宏
       _IO(type, nr)        定义一个无参的命令
       _IOR(type, nr, size) 定义一个从设备读取数据的命令
       _IOW(type, nr, size) 定义一个向设备写入数据的命令
       _IOWE(type, nr, size)定义一个双向传送的命令,顺序是先写后读
       
       _IO    an ioctl with no parameters
       _IOW   an ioctl with write parameters (copy_from_user)                                    
       _IOR   an ioctl with read parameters  (copy_to_user)                                      
       _IOWR  an ioctl with both write and read parameters. 

    1.3从命令码提取成员宏
      _IOC_TYPE(cmd)   提取数据类型
      _IOC_NR(cmd)     提取序列号
      _IOC_DIR(cmd)    提取数据方向
      _IOC_SIZE(cmd)   提取数据尺寸
   
    1.4在内核空间和用户空间传递数据
       copy_from_user
       copy_to_user
       get_user
       put_user

    1.5验证传递的用户空间指针是否有效(已经有对应的物理空间)
       access_ok()	arch/arm/include/asm/uaccess.h
       用于判断用户空间内存是否可访问
       int access_ok(int type, const void *addr, unsigned long size)
       	   type: 取值通常为 VERIFY_READ or VERIFY_WRITE, 用来表明是读用户空间内存还是
	         写用户内存. 注意:其方向性和对设备的读写正好相反
           addr: 待验证的用户内存
	   size: 待验证的用户内存大小
	   返回值: 返回1代表成功,返回0代表失败(用户内存存取有问题)
	   
	   如果access_ok失败, ioctl操作应该立即返回-EFAULT.
       
    ----------------------------------------
    1.6 控制LED灯
       gpio_direction_output(GPIO,0) 设置GPIO口的输出方向
       s3c_gpio_setpull(GPIO, S3C_GPIO_PULL_NONE) 设置上拉电阻
       gpio_set_value(GPIO, val)  设置控制寄存器/数据寄存器值

================================================================================
 2.并发与竞态
    2.1 定义
    	并发: 多个执行单元同时发生.
	竞态: 并发的执行单元对共享资源(硬件资源或软件上的全局变量)的访问导致的竞争状态.
    2.2 主要发生情况
        * 对称多处理器SMP的多个CPU之间(ex:访问内存)
	      由于它们使用共同的系统总线,所以访问共同的外设和存储
	* 单CPU内核抢占它的进程
	      由于内核支持抢占调度,如果一个进程在内核中执行时可能被另一个更高优先级进程打断,
	      进程与抢占它的进程访问共享资源类似于SMP情况.
	* 中断(硬/软中断,Tasklet,Bottom Half)
 	      出现竞态有两种情况:
		1. 中断例程需要访问被中断的进程访问的资源
		2. 中断被更高优先级的中断所中断
    2.3 解决竞态问题的途径
          就是保证对共享资源的互斥访问. 所谓互斥访问是指一个执行单元访问共享资源时,禁止其他
	  执行单元访问.
	  我们只需要保证临界区的互斥执行即可.
	  在LINUX系统中,中断屏蔽,原子操作,自旋锁,信号量是设备驱动程序中可以采用的互斥机制.
	  
	  1.中断屏蔽:
		修改特定寄存器, 其含义是CPU不响应当前中断.这是在单CPU清况下避免竞态的一个简单
		方法,在进入临界区之前屏蔽中断,退出临界区之前恢复中断.
		一般清况下,CPU都具备屏蔽/打开中断的功能.这项功能可以保证正在执行的内核路径
		不被中断程序抢占,可以防止某些竞争条件的发生.
		屏蔽中断之后,中断与进程之间的并发不再发生;由于LINUX内核的进程调度等操作都依赖
		于中断来实现,内核抢占进程之间的并发不再发生.
		
		1.中断控制操作
		 include/linux/irqflags.h
		 local_irq_enable()
		 local_irq_disable()
		 local_irq_save()
		 local_irq_restore()
		 (注意:SMP情况下,它们只屏蔽/打开执行它们的CPU的中断,不影响其他CPU核)
	        
		2.一般使用方法
		  local_irq_disable()
		  ...
		  critical section
		  ...
		  local_irq_enable()
		 
		 由于系统的异步I/O,进程调度等很多重要的系统操作都依赖于中断,所以,中断对于
		 内核运行至关重要,在屏蔽中断期间所有的中断都无法得到处理.	
		 因此,长时间[屏蔽中断是危险的,有可能造成数据丢失,甚至系统崩溃.
		 所以,我们要求屏蔽中断之后,当前的内核代码执行路径应当尽快执行完临界区代码.

 	 2.原子操作
	           原子操作指的是在执行路径中不会被别的代码中断的操作.
		   在Linux内核中提供两种类原子操作:
		      1.位原子操作
		      2.整型原子操作
		      
		   原子操作依赖底层CPU的原子操作来实现,所有这些函数都与CPU的架构紧密相关.
		   
		   3.1位原子操作:
		       arch/arm/include/asm/bitops.h中定义
	  	       设置位:
		         set_bit(nr, void *addr)  将addr地址内数据的第nr位设置为1
			   
		       清除位:
		         clear_bit(nr, void *addr) 将addr地址内数据的第nr位清零
			 
		       改变位:
		         change_bit(nr, void *addr) 将addr地址内数据的第nr位置反
			 
		       测试位:
		         int test_bit(nr, void *addr) 获取addr地址内第nr位的值(0/1)

		       测试并操作:
		         int test_and_set_bit(nr, void *addr)
			 int test_and_clear_bit(nr, void *addr)
			 int test_and_change_bit(nr, void *addr)

		  3.2整型原子操作:
		     arch/arm/include/asm/atomic.h
		     定义:
			typedef struct{
				volatile int counter;
			}atomic_t;
		     
		     整型原子操作:
		      设置原子变量的值:
			atomic_set(atomic_t *v, int i) 设置原子变量v的值为i
			
			atomic_t v=ATOMIC_INIT(i);   定义一个整型原子变量

		      获取原子变量的值:
		        atomic_read(atomic_t *v);  返回原子变量的值

		      原子变量的加减操作:
		        atomic_add(int i, atmoic_t *v)
			atomic_sub(int i, atmoic_t *v)
			
		      原子变量的++/--:
		        atomic_inc(atomic_t *v)
			atomic_dec(atomic_t *v)

		      测试并操作:
		        atomic_inc_and_test(atomic_t *v);
			atomic_dec_and_test(atomic_t *v);
			atomic_sub_and_test(int i, atomic_t *v);
			  这些操作先对原子变量执行自增,自减或减操作(没有加操作),
			  然后测试其值是否为0.如果为0返回真,否则返回假.
			  
		      操作并返回:
		        atomic_inc_and_return(atomic_t *v);
			atomic_dec_and_return(atomic_t *v);
			atomic_sub_and_return(int i, atomic_t *v);
			atomic_add_return(int i, atomic_t *v);
			这些操作首先进行相应的运算,然后返回新值.
		
	 3.自旋锁
	    自旋锁最多只能有一个执行单元持有. 自旋锁不会引起进程睡眠, 如果一个执行进程试图
	    获取一个已经被持有的自旋锁,那么进程就会一直进行忙循环检测,一直到自旋锁被释放.
	    "自旋"近似于在"原地转圈"的意思. 
	    注意:这两个进程都不会进入睡眠状态
	    
	    include/linux/spinlock_types.h
	    
	    typedef struct {
	    	    raw_spinlock_t  raw_lock;
		    ...
		 }spinlock_t;
  		  
	    typedef struct {
	    	    volatile unsigned int lock;
		    ...
		 }raw_spinlock_t;
	   3.2 自旋锁操作
	     include/linux/spinlock.h
		
		定义自旋锁:
			spinlock_t lock;

		初始化自旋锁:
			spin_lock_init(spinlock_t *lock);
			自旋锁在使用之前必须初始化
			
		获取自旋锁:
			spin_lock(spinlock_t *lock)
			获取自旋锁,如果成功,立即获得锁,并马上返回;
			如果失败,它将一直自旋在那里,直到该自旋锁的持有者释放该锁.
			
			spin_trylock(spinlock_t *lock)
			试图获取自旋锁,如果能获得锁,则获得并立即返回真;否则立即返回假.
			
		释放自旋锁:
		      spin_unlock(spinlock_t *lock);
		      释放自旋锁,它必须和spin_lock()/spin_trylock()成对使用.
		
		一般使用方法:
		      spinlock_t lock;
		      spin_lock_init(&lock);
		      ...
		      spin_lock(&lock);
		      ...
		      critical section
		      ...
		      spin_unlock(&lock);

		 自旋锁主要用于SMP/单CPU但内核可抢占的情况.  系统会维护一个全局变量,所有的CPU
		 都会检测该变量,所以可以保证在SMP环境下仍然有效.
		 
		 衍生自旋锁
		   虽然自旋锁可以保证临界区不受别的CPU/本CPU的抢占进程打扰,但是,还是会受
		   中断和中断底半部的影响. 所以,产生如下衍生:
		     spin_lock_irq()
			local_irq_disable+spin_lock
			
		     spin_unlock_irq()
		        spin_unlock+local_irq_enable
 
		     spin_lock_irqsave()
		        local_irq_save+spin_lock

		     spin_unlock_irqsave()
		       spin_unlock+local_irq_restore
		       
		     spin_lock_bh()
		       local_bh_disable+spin_lock

		     spin_unlock_bh()
		       spin_unlock+local_bh_enable
	
	       自旋锁使用注意
	         1.只有在占用锁时间极短的情况下使用.由于获取锁是一直等待,所以临界区
		 较大或有共享设备的时候,使用自旋锁会降低系统性能.
		 2.自旋锁可能导致死锁
		    1.递归调用,也就是已获得自旋锁,再次申请自旋锁
		    2.获取锁之后再被阻塞,所以,在自旋锁占用期间,我们不能调用可能会引起阻塞的函数
		       比如:kmalloc()/copy_from_user()/copy_to_user()
	    			
	================================================================
	  3.3  读写锁
	       自旋锁不关心临界区操作是读还是写。
	       实际上，对于共享资源并发访问时，多个执行单元同时读取它不会发生问题。
	       读写自旋锁是一种比自旋锁粒度更小的锁机制：对于写操作，只能最多有一个写进程，对于
	       读操作，可以同时有多个执行单元。但是，读和写也不能同时进行。
	       1.读写自旋锁数据定义
	       在内核源代码include/linux/spinlock_types.h中定义
	       typedef struct{
		       raw_rwlock_t  raw_lock;
		} rwlock_t;
	       typedef struct{
	       	       	volatile unsigned int lock;
		} raw_rwlock_t;
	      2.读写自旋锁操作
	      在内核源代码include/linux/spinlock.h中定义
	      2.1定义和初始化
	      rwlock_t  lock = RW_LOCK_LOCKED;//静态初始化
	      rwlock_t  lock;
	      rwlock_init( &lock );//动态初始化
	      2.2读锁定
	      read_lock( rwlock_t  *lock );
	      read_lock_irq(rwlock_t  *lock);
	      read_lock_irqsave(rwlock_t  *lock, unsigned long flags);
	      read_lock_bh(rwlock_t  *lock);
	      2.3读解锁
	      read_unlock( rwlock_t  *lock );
	      read_unlock_irq(rwlock_t  *lock);
	      read_unlock_irqsave(rwlock_t  *lock, unsigned long flags);
	      read_unlock_bh(rwlock_t  *lock);
	      2.4写锁定
	      write_lock( rwlock_t  *lock );
	      write_lock_irq(rwlock_t  *lock);
	      write_lock_irqsave(rwlock_t  *lock, unsigned long flags);
	      write_lock_bh(rwlock_t  *lock);
	      write_trylock(rwlock_t  *lock);
	      2.5写解锁
	      read_lock( rwlock_t  *lock );
	      read_lock_irq(rwlock_t  *lock);
	      read_lock_irqsave(rwlock_t  *lock, unsigned long flags);
	      read_lock_bh(rwlock_t  *lock);
	      2.6一般使用方法
	      rwlock_t  lock; //定义一个读写锁
	      rwlock_init(&lock);//初始化读写所
	      …
	      //读时使用锁
	      read_lock(&lock);
	      …
	      critical section
	      …
	      read_unlock(&lock);
	      …
	      //写时使用锁
	      write_[try]lock(&lock);
	      …
	      critical section
	      …	      
	      write_unlock(&lock);

--------------------------------------------------------------------------------
	  3.4 顺序锁
	      顺序锁是对读写锁的一种优化。
	      特点是读写可以同时进行，写写互斥。
	      如果读的时候发生了写，读操作必须重新读取数据。
	      1.顺序锁定义
	      在内核源代码include/linux/seqlock.h中定义
	      typedef struct{
	      	    unsigned sequence;
		    spinlock_t lock;
		    } seqlock_t;
	      2.顺序锁操作
	      在内核源代码include/linux/seqlock.h中定义
	      2.1定义和初始化
	      seqlock_t  sl;
	      seqlock_init(&sl);
	        2.2读顺序锁
		unsigned read_seqbegin(seqlock_t  *sl);
		2.3读顺序锁检查
		int read_seqretry(seqlock_t *sl,unsigned start);
		2.4写锁定
		write_seqlock(seqlock_t *sl);
		write_tryseqlock(seqlock_t *sl);
		write_seqlock_irq(seqlock_t *sl);
		write_seqlock_irqsave(seqlock_t *sl, unsigned long flags);
		write_seqlock_bh(seqlock_t *sl);
		2.5写解锁
		write_sequnlock(seqlock_t *sl);
		write_sequnlock_irq(seqlock_t *sl);
		write_sequnlock_irqsave(seqlock_t *sl, unsigned long flags);
		write_sequnlock_bh(seqlock_t *sl);
	 
	 2.6一般使用方法
		2.6.1写
		write_[try]seqlock(&sl);
		…
		critical section
		…
		write_sequnlock(&sl);
		2.6.2读
		unsigned rsl = read_seqbegin(&sl);
		2.6.3检查
		read_seqretry(&sl,rsl);
	在对共享资源访问之后再次调用检查，检查在读访问期间是否有写操作。如果有写操作，读执行单元
        就需要重新进行读操作。
		do{
		seqnum = read_seqbegin(&sl);
		…
		critical section //读操作
		…
		}while(read_seqretry(&sl,seqnum));
		3.顺序锁使用限制
		4.要求被保护的共享资源不可以包含指针。因为，如果写操作使得指针失效，读操作单元对
		该已经失效的指针的操作将导致Oops。

   读—拷贝—更新
	RCU(Read Copy Update),在内核源代码include/linux/rcupdate.h中定义。
	原理：写前复制副本，在副本中执行修改，在所有引用该共享数据的CPU都退出对共享数据的操作时
	，将指向原来数据的指针重新指向新的被修改后的数据。

	================================================================================
  	4.信号量
		在内核源代码include/linux/semaphore.h中定义
			struct semaphore sem;
		操作：
	 void sema_init(struct semaphore *sem, int val); 初始化信号量值为 val	

	 void init_MUTEX(struct semaphore *sem); 动态分配互斥体时,进行初始化为1

	 void init_MUTEX_LOCKED(struct semaphore *sem);动态分配互斥体,初始化值为0

	 DECLARE_MUTEX(name); 名为name的信号量被初始化成1,用于互斥

	 DECLARE_MUTEX_LOCKED(name); 名为name的信号量被初始化成0,用于同步,允许进程访问之
				      前,必须显示的解锁该结构体.

         void down(struct semaphore *sem); P操作,减小信号量的值,并在必要时一直等待,不会被信号打
	      		  	    	   断,进程的状态是TASK_UNINTERRUPTABLE.
					     

	 int  down_interruptible(struct semaphore *sem); P操作,减小信号量的值,也会进入等待,但是
	      					  	   等待可以被信号打断,要检查其返回值.被
							   中断时,返回值为负数. 进程的状态是
							   TASK_INTERRUPTABLE
         
         int  down_trylock(struct semaphore *sem); 尝试进行P操作,但是永远不会进入休眠,不可获得
	      			  	             信号量时立即返回一个非0值
						     
	 int down_uninterruptible(struct semaphore *sem); P操作,会等待,并不可以被中断,不推荐使用

	 int down_killable(struct semaphore *sem); P操作,会等待,进程进入 TASK_KILLABLE状态. 
	
	 void up(struct semaphore *sem); 释放信号量,并唤醒等待者 ,V操作

      ----------------------------------------
     信号量和自旋锁 总结:
       从严格的意义上说, 信号量和自旋锁属于不同层次的互斥手段,前者的实现依赖于后者. 在信号量
       本身的实现上,为了保证信号量结构存取的原子性,在多CPU中需要自旋锁来互斥对信号量本是的操作.
        信号量是进程级的,用于多个进程之间对资源的互斥,虽然也在内核中,但是在内核执行路径是以进程
	身份,代表进程争夺资源的.如果竞争失败,会发生进程上下文的些环,当前进程进入睡眠状态,CPU
	将运行其他进程. 鉴于进程切换开销很大,因此, 只有当进程占用资源较长时间时,信号量是较好的
	选择.
	
        1.信号量的实现依赖于自旋锁,为保证信号量数据结构存取的原子性,在多CPU中需要自旋锁来互斥
	2.信号量可能允许多个持有者,而自旋锁在任何时候只能允许一个持有者. 允许有多个持有者的信号
	   量叫"计数信号量". 
	3.信号量适用于保持时间比较长的情况;而自旋锁适用于保持时间短的情况.在实际应用中自旋锁控制
	  的代码通常只有短短几行,而持有自旋锁的时间一般也不会超过两次上下文切换时间.
	  
	4.当锁不能被获取时,使用信号量的开销是进程上下文切换的时间T_sw; 使用自旋锁开销是等待获取
	   自旋锁(由临界区执行的时间决定)T_cs, 若T_cs较小,则采用自旋锁较好
	
	5.信号量所保护的临界区可包含可能引起阻塞的代码, 但是自旋锁要绝对避免用来保护包含这样代码
	   的临界区. 因为阻塞意味着进程切换,如果其他进程又申请自旋锁则会导致死锁.
	
	6.信号量存在于进程上下文,因此, 如果被保护的共享资源需要在中断/软中断情况下实际用,
	   则只能使用自旋锁. 因为,在中断处理函数中信号量无效.
	   
     信号量用于同步:
       如果我们的信号量被初始化为0, 则它可以用于同步. 同步 意味着一个执行但愿的继续执行需要等待
       另一个执行单元完成某件事情, 保证执行的先后顺序.

      ----------------------------------------
      读写信号量
         读写信号量和信号量的区别,类似于读写自旋锁和自旋锁的区别.
	 include/linux/rwsem-spinlock.h 
	 kernel/rwsem.c
      
      ----------------------------------------
      完成量:
        完成量是一种同步机制.它用于一个执行单元等待另一个执行单元执行完某些操作.
	include/linux/completion.h
        
	struct completion {                                                          
         unsigned int done;                                                   
         wait_queue_head_t wait;                                              
 	   }; 							 
        完成量操作:
	  定义完成量:
	  初始化完成量:
	  void init_completion(struct completion *compl)

	  等待完成量:
	  void wait_for_completion(struct completion *compl)
	    等待一个conmpletion被唤醒

	  唤醒完成量:  
	   void completion(struct completion *compl);
	     只唤醒一个
	   void completion_all(struct completion *compl);
	     唤醒所有等待同一个完成变量的执行单元.
	     
     ----------------------------------------
     互斥体
       include/linux/mutex.h
       struct mutex{
       	      atomic_t count;
	      spinlock_t wait_lock;
	      struct list_head wait_list;
	      ....
       };
       
       操作定义在:
       include/linux/mutex.h
       定义和初始化:
          mutex_init()
       获取互斥体:
          mutex_lock()
	  mutex_lock_interruptible()
	  mutex_trylock(): 在中断上下文中应当使用mutex_trylock()
       释放互斥体:
          mutex_unlock()

      ----------------------------------------
      内核等待队列:
          被阻塞的进程是会被放到等待队列当中的.
 	  在Linux驱动程序中,可以使用等待队列实现进程阻塞, 等待队列可以看作保存进程的容器,
	在阻塞进程时,将进程放入等待队列, 当进程被唤醒时,从等待队列中提取出进程.

	   实际上,信号量在内核中也依赖等待队列实现.	  
	 等待队列数据定义:
	  include/linux/wait.h
	  
	 等待队列的操作:
	  include/linux/wait.h
	   定义和初始化队列头
	   定义和初始化等待队列
	   添加/移出等待队列
	   等待事件
	   唤醒队列
	   在队列中睡眠
	  
	 一般使用方法:
	  1.定义和初始化等待队列,将进程状态改变, 并将等待队列添加到等待队列头指向的链表.
  	    改变进程状态的方法:
	      1.set_current_state(0
	      2.__add_wait_queue()
	      3.current->state=TASK_INTERRUPTIBLE
	    
	  2.通过schedule()调用放弃CPU, 调取其他进程执行.
	     schedule() 定义在 kernel/sched.c
	     
	  3.进程被其他地方唤醒, 将代表进程的等待队列移出等待队列执行的链表.
	  
	 ----------------------------------------
	 阻塞/非阻塞
	  应用程序并不关心read/write具体实现,只管调用.
	  如果我们的设备还没有准备好数据被应用程序读/设备接受应用程序的输入,那么我们的
	  "驱动程序"应当阻塞进程, 使他进入睡眠,直到请求可以满足. 就是利用阻塞队列.

	  阻塞型设备驱动实现:
	    1.阻塞读
	      如果进程调用read,当设备没有数据或条件不满足时,进程应该被阻塞.当新数据到达后,唤醒被
	      阻塞进程.
	    2.阻塞写
	      如果进程调用write,当设备写条件不满足时,进程应该被阻塞.当写条件满足时,唤醒被阻塞进
	      程.
	      
          应用程序的非阻塞读:
	    阻塞方式是文件读写操作的默认方式.
	    应用程序可以通过使用 O_NONBLOCK 标志来人为地设置读写操作为非阻塞方式.
	    include/asm-generic/fcntl.h 中定义.
	    如果设置了O_NONBLOCK标志,read和write的行为相同.

	----------------------------------------
	设备移位操作:
	  对应llseek和lseek系统调用的设备移位操作为llseek.
	  默认允许设备移位操作.
	  
	  1.不支持设备移位操作
	    大部分设备提供的是数据流而不是数据区,比如串口, 对于这些设备而言移位操作毫无意义.
	    对于不支持设备移位操作的设备,应该通知内核不支持设备移位操作llseek.
	      方法:
	          在open操作中调用 nonseekable_open(),并指定llseek为no_llseek().
	           fs/open.c
		  int nonseekable_open(struct inode* inode, struct file *filp);
	   	   fs/read_write.c
		  loff_t no_llseek(struct file *filp, loff_t off, int whence);

          2.支持设备移位操作
	    loff_t xxx_llseek(struct file *filp, loff_t off, int whence)
	    {
	       loff_t newpos;
	       switch(whence){
	       case SEEK_SET:
	       case SEEK_CUR:
	       case SEEK_END:
	       default:
	         return -EINVAL;  //参数无效
	       }
	       
	       if(0 > newpos | newpos < BUFFERSIZE) {
	       	  return -EINVAL;
	       }
	       return newpos;
	    }

	    read(..., loff_t *f_pos) write(..., loff_t *f_pos)
	    {
		unsigned int cnt=count;
		if(BUFFERSIZE < (*f_pos)+cnt){
		   cnt=BUFFERSIZE-(*f_pos)-1;
		}
		...
		return cnt;		
	    }

  ================================================================================
   轮询设备操作
	1。select系统调用
	  用于多路监控，当没有一个文件满足条件要求时，select调用将引起进程阻塞。
	  fs/select.h
	  do_select()核心函数
	
	2。poll操作
	  unsigned int (*poll)(struct file *filp, struct poll_table_struct *wait);
	  unsigned int (*poll)(struct file *filp, poll_table *wait);
	  
	  filp:文件指针
	  wait：轮询表指针
	  轮询操作的任务：
	    1。使用poll_wait()将等待队列添加到poll_table;
	    2。返回描述设备是否可读或可写的掩码。

	    include/linux/poll.h

	    typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);
	    typedef struct poll_table_struct {
	    	    poll_queue_proc qproc;
		    } poll_table;

	  3。poll_wait()函数：
	  static inline void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
	  {
	    if (p && wait_address)
		p->qproc(filp, wait_address, p);
	  }
	  该函数不会引起阻塞，它仅仅是将我们的当前进程添加到wait参数指定的等待列表(poll_table)中。
	  4。poll函数返回值
	     通常返回下列定义“或”的结果：
	      POLLIN        设备可以不阻塞的读，设备本身的缓冲区ready
	      POLLOUT       设备可以不阻塞的写，设备本身的缓冲区ready
	      POLLRDNORM     数据可读，驱动程序中的缓冲可读
	      POLLWRNORM    数据可写，，驱动程序中的缓冲可写
	      设备可读通常返回： POLLIN|POLLRDNORM
	      设备可写通常返回： POLLOUT｜POLLWRNORM
	      
	  5。poll操作一般结构
	     unsigned int xxx_poll(...){
	      	      unsinged int mask=0;
		      ...
		      poll_wait();
		      ...
		      if(device is ready for read){
		      	      mask=POLLIN|POLLRDNORM;
		      }
		      if(device is ready for write){
		      		maske=POLLOUT|POLLWRNORM;
		      }
		      ...
		      return mask;
	    }
	    poll操作是提供给系统select()调用的。
