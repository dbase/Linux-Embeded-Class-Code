
================================================================================
1.   轮询设备操作
	1。select系统调用
	  用于多路监控，当没有一个文件满足条件要求时，select调用将引起进程阻塞。
	  fs/select.h
	  do_select()核心函数
	
	2。poll操作
	  unsigned int (*poll)(struct file *filp, struct poll_table_struct *wait);
	  unsigned int (*poll)(struct file *filp, poll_table *wait);
	  
	  filp:文件指针
	  wait：轮询表指针
	  轮询操作的任务：
	    1。使用poll_wait()将等待队列添加到poll_table;
	    2。返回描述设备是否可读或可写的掩码。

	    include/linux/poll.h

	    typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);
	    typedef struct poll_table_struct {
	    	    poll_queue_proc qproc;
		    } poll_table;

	  3。poll_wait()函数：
	  static inline void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
	  {
	    if (p && wait_address)
		p->qproc(filp, wait_address, p);
	  }
	  该函数不会引起阻塞，它仅仅是将我们的当前进程添加到wait参数指定的等待列表(poll_table)中。
	  4。poll函数返回值
	     通常返回下列定义“或”的结果：
	      POLLIN        设备可以不阻塞的读，设备本身的缓冲区ready
	      POLLOUT       设备可以不阻塞的写，设备本身的缓冲区ready
	      POLLRDNORM     数据可读，驱动程序中的缓冲可读
	      POLLWRNORM    数据可写，，驱动程序中的缓冲可写
	      设备可读通常返回： POLLIN|POLLRDNORM
	      设备可写通常返回： POLLOUT｜POLLWRNORM
	      
	  5。poll操作一般结构
	     unsigned int xxx_poll(...){
	      	      unsinged int mask=0;
		      ...
		      poll_wait();
		      ...
		      if(device is ready for read){
		      	      mask=POLLIN|POLLRDNORM;
		      }
		      if(device is ready for write){
		      		maske=POLLOUT|POLLWRNORM;
		      }
		      ...
		      return mask;
	    }
	    poll操作是提供给系统select()调用的。
   
   ================================================================================
2.
阻塞: 设备为就绪则阻塞进程
非阻塞: 设备为就绪则直接返回状态
轮询: 由应用程序通过查询状态判断设备是否就绪 --poll

驱动程序中主动向应用成主动报告设备的读写状态:
异步: 一旦设备就绪, 主动通知应用程序

在Linux中,我们的异步机制使用 信号 来实现. 在 arch/arm/include/asm/signal.h
在Fedroa6中共有 62个信号: 1-31是非实时信号 , 34-64是实时信号

   在设备驱动程序中应该增加信号释放的相关处理:
       1. 设置F_SETOWN命令处理
        调用fcntl需要将filp->owner设置为对应进程的ID, 虚拟文件系统已经完成此步骤.

       2. 设置F_SETFL命令处理
        每当FASYNC标志改变时,驱动中的fasync()函数将得以执行,所以驱动程序中应实现一个fasync()函数,
	来获取捕获这个改变,来设置设备数据结构的 async_queue 指针.
	!!!这会引起驱动程序中 fasync() 函数的调用.!!!
		
       3.释放信号
         在驱动中通过调用kill_fasync()函数释放相应的信号
       4. fasync_struct 数据结构
          include/linux/fs.h
struct fasync_struct {
	int	magic;
	int	fa_fd;
	struct	fasync_struct	*fa_next; /* singly linked list */
	struct	file 		*fa_file;
};

   常见用法: 在驱动程序数据结构中包含fasync_struct数据结构指针成员.
        struct XXX_cdev{
	       ...
	       struct fasync_struct *async_queue;
	       };
       5. fasync()函数
        在file_operations数据结构中定义:
	int (*fasync)(int fd, struct file *filp, int mode);
	
	常见实现:
	 static int xxx_fasync(int fd, struct file *filp, int mode)
	 {
		struct xxx_cdev *pcdev=filp->private_data;
		return fasync_helper(fd, filp, mode, &pcdevp->async_queue);
	 }
       6. kill_fasync()函数
       	  释放信号. 在我们的设备资源可以获得的时候, 应该调用该函数释放SIGIO信号. 可读时为 POLL_IN;
	  可写的时候为 POLL_OUT .
	  fs/fcntl.c
	  void kill_fasync(struct fasync_struct **fp, int sig, int band);
	  应当在驱动程序的write操作中调用.

	  常见实现:
	      static ssize_t xxx_write(...){
	      	     struct xxx_cdev *cdev=filp->priate_data;
		     ...
		     if(cdev->async_queue) {
		     	   kill_fasync(&cdev->async_queue, SIGIO, POLL_IN);
 		     }
		     ...
	      }
      7.删除我们的异步通知
         在文件关闭release函数中实现. 应该调用驱动的fasync()将文件从异步通知列表中删除.
	 
	 常见实现:
	 static int xxx_release(...)
	 {
		...
		xxx_fasync(-1, filp, 0);
		...
	 }
	 
       ----------------------------------------
       当一个进程收到SIGIO,它不知道是那个文件有新数据提供. 
       如果有多个文件被使能异步通知挂起输入进程, 应用程序必须依靠select()来找出具体是那个文件发生变化.
       
       ----------------------------------------
       异步IO
       字符设备很少用到异步IO, 对于块设备和网络设备本身就是异步的.

       
