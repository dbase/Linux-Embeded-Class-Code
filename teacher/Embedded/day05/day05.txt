链表
    1. 链表
	1.1 链表定义
	1.2 与数组
	1.3 链表开销
	1.4 链表构成
	1.5 链表分类
    2. 内核链表
	在Linux内核中大量使用链表结构来组织数据。
	2.1 定义
	    在内核源代码include/linux/list.h中定义
	    struct list_head {
		struct list_head *next, *prev;
	    };
	    在list_head结构中包含两个指向list_head结构的指针next和prev，所以，内核链表具备双链表功能。
	    在实际使用中，它通常被组织成双向循环链表。
	2.2 内核链表和普通链表区别
	2.3 链表主要操作
	    2.3.1 初始化操作
		void INIT_LIST_HEAD(struct list_head *list);
		list: 待初始化的链表头
	    2.3.2 插入节点
		void list_add(struct list_head *new, struct list_head *head);
		void list_add_tail(struct list_head *new, struct list_head *head);
		new: 待插入到链表的新节点
		head: 带插入到链表的紧邻节点
	    2.3.3 删除节点
		void list_del(struct list_head *entry);
		entry: 待删除的节点
	    2.3.4 提取数据结构
		#define list_entry(ptr, type, member) container_of(ptr, type, member)
		ptr: 当前链表节点指针
		type: 包含链表节点的数据结构类型
		member:包含在数据结构类型中的list_head成员名称
	    2.3.5 遍历
		#define list_for_each(pos, head) for(xxx)
		#define list_for_each_safe(pos, n, head) for(xxx)
		pos:list_head类型的循环变量
		n:list_head类型的循环变量
		head:待遍历的链表的链表头


内核定时器
    1. 时钟中断
	由系统的定时硬件以周期性的时间间隔发生，这个间隔(也就是频率)由内核根据HZ来确定。
    2. HZ
	它是一个与体系结构无关的常数，可以配置在50-1200之间。
    3. tick
	它是HZ的倒数
    4. jiffies
	它是Linux核心变数(32bit,unsigned long)，它被用来记录系统自开机以来，已经经过多少个tick
    5. 如果定时精度要求不高，可以直接用jiffies来延时
	unsigned long waittime = jiffies + delay_seconds * HZ;
	while( jiffies < waittime) {};
    6. 定时器作用
	它由用户控制某个函数(定时器函数)在未来的某个时刻执行。
	在Linux系统中，内核定时器注册的处理函数只执行一次(不是循环执行的)。
    7. 内核定时器定义为一个双向链表
	在内核源代码include/linux/timer.h中定义
	struct timer_list {
	    struct list_head entry; // 内核使用
	    unsigned long expires; // 超时时候的jiffies值
	    void (*function)(unsigned long); // 超时处理函数
	    unsigned long data; //设定传递给定时处理函数的参数
	    struct tvec_base *base; // 内核使用
	};
    8. 内核定时器操作函数
	在内核源代码include/linux/timer.h中定义
	8.1 初始化
	    void init_timer(struct timer_list *timer);
	8.2 启动定时器
	    void add_timer(struct timer_list *timer);
	8.3 删除定时器
	    void del_timer(struct timer_list *timer);
		该函数在定时器超时前将定时器删除。
		实际上，在定时器超时后，系统会自动将其删除。

进程控制
    1. 进程和程序定义
    2. 进程四要素
    3. 在Linux系统中，线程、进程都通过task_struct数据结构来描述，它包含大量描述线程、进程的信息。
	3.1 task_struct数据结构
	    在内核源代码include/linux/sched.h中定义
	    struct task_struct {
		pid_t pid, // 进程号
		volatile long state, // 进程状态
		int exit_state, // 进程退出状态
		struct mm_struct *mm, //进程用户空间描述指针，对于内核线程该指针为空
		unsigned int policy, // 进程调度策略
		int prio, // 进程优先级
		int static_prio, // 进程静态优先级
		struct sched_rt_entity rt; // 进程实时调度实体
		struct task_struct *real_parent; // 真实的父进程
		struct task_struct *parent; // 对于信号SIGCHILD,wait4()等报告的接收容器
		char comm[ TASK_COMM_LEN]; // 不包含路径的执行程序的名称
		...
	    };
	3.2 进程状态
	    TASK_RUNNING
	    TASK_INTERRUPTIBLE
	    TASK_UNINTERRUPTIBLE
	    TASK_STOPPED
	    TASK_KILLABLE
	    TASK_TRACED
	    TASK_DEAD
	3.3 进程退出状态
	    EXIT_ZOMBIE
	    EXIT_DEAD
	3.4 进程优先级
	    数值越大，优先级越低。
	    取值范围：0---(MAX_PRIO - 1 )   // 139
	    其中：0---(MAX_RT_PRIO - 1) // 实时进程
		MAX_RT_PRIO---(MAX_PRIO - 1 ) // 非实时进程
	    #define MAX_USR_RT_PRIO 100
	    #define MAX_RT_PRIT MAX_USR_RT_PRIO 
	    #define MX_PRIO (MAX_RT_PRIO + 40)
	    #define DEFAULT_PRIO (MAX_RT_PRIO + 20)
	3.5 进程静态优先级
	    数值越大，优先级越低。
	    它决定进程出示时间片的大小。实时进程该值不参与优先级运算。
	3.6 时间片
	    rt->timer_slice
	    内核将100-139的优先级映射到200ms-10ms的时间片上，优先级数值越大，分配的时间片越小。
    4. current指针
	它始终指向当前正在运行的进程的task_struct结构体。
    5. 进程创建过程
    6. 进程销毁过程


进程调度
    1. 调度定义
	从准备就绪的进程中用一定的规则选出最适合的一个来执行。
    2. 调度策略
	SCHED_NORMAL
	SCHED_FIFO
	SCHED_RR
	SCHED_BATCH
	SCHED_IDLE
    3. 调度时机(schedule())
	3.1 主动式
	    在内核中直接调用schedule()函数。
	    当进程需要等待资源而暂时停止运行时，会把状态设置为挂起(睡眠)，并主动请求被调度，让出CPU。
	    current->state = TASK_INTERRUPTIBLE;
	    schedule();
	3.2 被动式
	    3.2.1 用户抢占
	    3.2.2 内核抢占
		Top Half
		Bottom Half
	3.3 调度标志: TIF_NEED_RESCHED
    4. 调度步骤
	schedule()函数工作流程：
	4.1 清理当前运行中的进程
	4.2 选择下一个要运行的进程
	4.3 为新进程设置运行环境
	4.4 进程上下文切换


系统调用
    1. 系统调用定义
	系统调用是Linux内核中设置的一组用于实现各种功能的子程序。
	在Linux 2.6.28.6中有大约360个系统调用。
	在内核源代码arch/arm/include/asm/unistd.h中
    2. 调用方法
    3. 系统调用和普通函数的区别
    4. LibC
    5. 新增系统调用
    6. 系统调用
	6.1 进程控制
	6.2 文件系统
	6.3 系统控制
	6.4 内存管理
	6.5 网络管理
	6.6 socket控制
	6.7 用户管理
	6.8 进程间通信
	    6.8.1 信号
	    6.8.2 消息
	    6.8.3 管道
	    6.8.4 信号量
	    6.8.5 共享内存









