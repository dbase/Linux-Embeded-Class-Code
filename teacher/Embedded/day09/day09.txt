读写锁
    自旋锁不关心临界区操作是读还是写，它都一视同仁。
    实际上，对于共享资源并发访问时，多个执行单元同时读取它不会引发问题。
    读写自旋锁是一种比自旋锁粒度更小的锁机制：对于写操作，只能最多有一个写进程；对于操作，可以同时有多个读执行单元。但是，读和写也不能同时进行。
    1. 读写自旋锁数据定义
	在内核源代码include/linux/spinlock_types.h中定义
	typedef struct {
	    raw_rwlock_t raw_lock;
	    ...
	} rwlock_t;
	typedef struct {
	    volatile unsigned int lock;
	} raw_rwlock_t;
    2. 读写自旋锁操作
	在内核源代码include/linux/spinlock.h中定义
	2.1 定义和初始化
	    rwlock_t lock = RW_LOCK_LOCKED; //静态初始化
	    rwlock_t lock;
	    rwlock_init(&lock); // 动态初始化
	2.2 读锁定
	    read_lock(rwlock_t *lock);
	    read_lock_irq(rwlock_t *lock);
	    read_lock_irqsave(rwlock_t *lock, unsigned long flags);
	    read_lock_bh(rwlock_t *lock);
	2.3 读解锁
	    read_unlock(rwlock_t *lock);
	    read_unlock_irq(rwlock_t *lock);
	    read_unlock_irqrestore(rwlock_t *lock, unsigned long flags);
	    read_unlock_bh(rwlock_t *lock);
	2.4 写锁定
	    write_lock(rwlock_t *lock);
	    write_lock_irq(rwlock_t *lock);
	    write_lock_irqsave(rwlock_t *lock, unsigned long flags);
	    write_lock_bh(rwlock_t *lock);
	    write_trylock(rwlock_t *lock);
	2.5 写解锁
	    write_unlock(rwlock_t *lock);
	    write_unlock_irq(rwlock_t *lock);
	    write_unlock_irqrestore(rwlock_t *lock, unsigned long flags);
	    write_unlock_bh(rwlock_t *lock);
	2.6 一般使用方法
	    rwlock_t rwl; // 定义一个读写锁
	    rwlock_init(&rwl); //初始化读写锁
	    ...
	    // 读时使用锁
	    read_lock(&lock);
	    ...
	    critical section
	    ...
	    read_unlock(&lock);
	    ...
	    // 写时使用锁
	    write_[try]lock(&lock);
	    ...
	    critical section
	    ...
	    write_unlock(&lock);


顺序锁
    顺序锁是对读写锁的一种优化。
    特点是读写可以同时进行，写写互斥。
    如果读时发生写，读操作必须重新读取数据。
    1. 顺序锁定义
	在内核源代码include/linux/seqlock.h中定义
	typedef struct {
	    unsigned sequence;
	    spinlock_t lock;
	} seqlock_t;
    2. 顺序锁操作
	在内核源代码include/linux/seqlock.h中定义
	2.1 定义和初始化
	    seqlock_t sl;
	    seqlock_init(&sl);
	2.2 读顺序锁
	    unsigned read_seqbegin(seqlock_t &sl);
	2.3 读顺序锁检查
	    int read_seqretry(seqlock_t *sl, unsigned start);
	2.4 写锁定
	    write_seqlock(seqlock_t *sl);
	    write_tryseqlock(seqlock_t *sl);
	    write_seqlock_irq(seqlock_t *sl);
	    write_seqlock_irqsave(seqlock_t *sl, unsigned long flags);
	    write_seqlock_bh(seqlock_t *sl);
	2.5 写解锁
	    write_sequnlock(seqlock_t *sl);
	    write_sequnlock_irq(seqlock_t *sl);
	    write_sequnlock_irqsave(seqlock_t *sl, unsigned long flags);
	    write_sequnlock_bh(seqlock_t *sl);
	2.6 一般使用方法
	    2.6.1 写
		write_[try]seqlock(&sl);
		...
		critical section
		...
		write_sequnlock(&sl);
	    2.6.2 读
		unsinged rsl = read_seqbegin(&sl);
	    2.6.3 检查
		read_seqretry(&sl, rsl);
		在对共享资源访问之后再次调用检查，检查在读访问期间是否有写操作。如果有写操作，读执行单元就需要重新进行读操作。
		do {
		    seqnum = read_seqbegin(&sl);
		    ...
		    critical section // 读操作
		    ...
		}while(read_seqretry(&sl, seqnum));
    3. 顺序锁使用限制
	要求被保护的共享资源不可以包含指针。因为，如果写操作使得指针失效，读操作单元对该已经失效的指针的操作将导致Oops。


读-拷贝-更新
    RCU(Read Copy Update)，在内核源代码include/linux/rcupdate.h中定义。
    原理：写前复制副本，在副本中执行修改，在所有引用该共享数据的CPU都退出对共享数据的操作时，将指向原来数据的指针重新指向新的被修改后的数据。


信号量
    在内核源代码include/linux/semaphore.h中定义
    struct semaphore sem;
    操作：
	sema_init();
	init_MUTEX();
	init_MUTEX_LOCKED();
	DECLARE_MUTEX();

	down();
	down_interruptible();
	down_killable();
	down_trylock();
	up();

信号量和自旋锁
    1. 信号量的实现依赖自旋锁，为保证信号量数据结构存取的原子性，在多CPU中需要自旋锁来互斥。
    2. 信号量可能允许多个持有者，而自旋锁在任何时候只能允许一个持有者。互斥信号量(只能有一个持有者)例外，允许多个持有者的信号量叫计数信号量。
    3. 信号量适用于保持时间比较场的情况；而自旋锁适用于保持时间短的情况。在实际应用中自旋锁控制的代码通常只有短短几行，而持有自旋锁的时间也一般不超过两次上下文切换的时间。


信号量用于同步
    如果信号量被初始化为0，则它可以用同步，同步意味着一个执行单元的继续执行需要等待另一个执行单元完成某件事情，保证执行的先后顺序。


读写信号量
    读写信号量和信号量的关系类似于读写自旋锁和自旋锁的关系。
    在内核源代码include/linux/rwsem-spinlock.h中定义
    在内核源代码kernel/rwsem.c中实现



完成量
    完成量是一种同步机制。它用于一个执行单元等待另一个执行单元执行完某事。
    1. 完成量数据定义
	在内核源代码include/linux/comletion.h中定义
	struct completion {
	    unsigned int done;
	    wait_queue_head_t wait;
	};
    2. 完成量操作
	2.1 定义完成量
	    struct completion compl;
	2.2 初始化完成量
	    init_completion(struct completion *compl);
	    DECLARE_COMPLETION(compl);
	2.3 等待完成量
	    void wait_for_completion(struct completion *compl);
	    等待一个completion被唤醒。
	2.4 唤醒完成量
	    void complete(struct completion *compl);
	    void complete_all(struct completion *compl);
	    前者只唤醒一个等待的执行单元，后者唤醒所有等待同一个完成量的执行单元。


互斥体
    1. 互斥体定义
	在内核源代码include/linux/mutex.h中定义
	struct mutex {
	    atomic_t count;
	    spinlock_t wait_lock;
	    struct list_head wait_list;
	    ...
	};
    2. 互斥体操作
	在内核源代码include/linux/mutex.h中定义
	2.1 定义和初始化
	    struct mutex mutx;
	    mutex_init(struct mutex *mutx);
	2.2 获取互斥体
	    mutex_lock(struct mutex *mutx);
	    mutex_lock_interruptible(struct mutex *mutx);
	    mutex_trylock(struct mutex *mutx);
	2.3 释放互斥体
	    mutex_unlock(struct mutex *mutx);

内核等待队列
    在Linux驱动程序中，可以使用等待队列来实现进程阻塞，等待队列可以看作保存进程的容器，在阻塞进程时，将进程放入等待队列，当进程被唤醒时，从等待队列中取出进程。
    实际上，信号量在内核中也依赖等待队列来实现。
    1. 等待队列数据定义
	在内核源代码include/linux/wait.h中定义
	struct __wait_queue_head {
	    spinlock_t lock;
	    struct list_head task_list;
	};
	typedef struct __wait_queue_head wait_queue_head_t;
	struct __wait_queue {
	    unsigned int flags;
	    #define WQ_FLAG_EXCLUSIVE 0x01;
	    void *private;
	    wait_queue_func_t func;
	    struct list_head task_list;
	};
	typedef struct __wait_queue wait_queue_t;
    2. 等待队列操作
	在内核源代码include/linux/wait.h中定义
	2.1 定义和初始化队列头
	    wait_queue_head_t wqh;
	    init_waitqueue_head(wait_queue_head_t *wqh);
	    DECLARE_WAIT_QUEUE_HEAD(wqh);
	2.2 定义和初始化等待队列
	    DECLARE_WAIT_QUEUE(name, tsk);
	    定义并初始化一个名称为name的等待队列
	2.3 添加/移除等待队列
	    add_wait_queue(wait_queue_head_t *wqh, wait_queue_t *wait);
	    remove_wait_queue(wait_queue_head_t *wqh, wait_queue_t *wait);
	    分别是将等待队列wait添加到等待队列头wqh指向的等待队列链表中，或者从中移除。
	2.4 等待事件
	    wait_event(queue, condition);
	    当条件为真时，立即返回；否则进程进入TASK_UNINTERRUPTIBLE类型的睡眠状态，并挂在queue指定的等待队列上
	   wait_event_interruptible(queue, condition);
	    wait_event_killable(queue, condition);
	    wait_event_timeout(queue, condition, timeout);
	    当condition为真时，立即返回；否则进程进入TASK_UNINTERRUPTIBLE类型的睡眠状态，并挂在queue指定的等待队列上。当阻塞时间timeout超时后，立即返回。
	    wait_event_interruptible_timeout(queue, condition, timeout);
	2.5 唤醒队列
	    wake_up(wait_queue_head_t *queue);
	    wake_up_interruptible(wait_queue_head_t *queue);
	    唤醒由queue指向的等待队列链表中所有等待队列对应的进程。
	2.6 在队列中睡眠
	    sleep_on(wait_queue_head_t *q);
	    让进程进入不可中断的睡眠，并将它放入等待队列。
	    interruptible_sleep_on(wait_queue_head_t *q);
	    让进程进入可中断的睡眠，并将它放入等待队列。
    3. 一般使用方法
	3.1 定义和初始化等待队列，将进程状态改变，并将等待队列添加到等待队列头指向的链表
	    改变进程状态的方法：
	    a).使用set_current_state()
	    b).使用__add_wait_queue()函数
	    c). 直接采用current->state = TASK_INTERRUPTIBLE, 类似于赋值语句
	3.2 通过schedule()调用放弃CPU，调取其它进程执行
	3.3 进程被其它地方唤醒，将等待队列移出等待队列头指向的链表



阻塞/非阻塞
    应用程序并不关心驱动里面read/write具体实现，只管调用并获取返回值。
    如果设备没有准备好数据给应用程序读或者没有准备好接收用户程序写，驱动程序应当阻塞进程，使它进入睡眠，直到请求可以得到满足。
    1. 阻塞型设备驱动实现
	1.1 阻塞读
	    在阻塞型驱动程序中，如果进程调用read设备操作，但是设备没有数据或者数据不足，进城应该被阻塞。当心数据到达后，唤醒被阻塞进程。
        1.2 阻塞写
	    在阻塞型驱动程序中，如果进程调用write设备操作，但是设备没有足够的空间供其写入数据，进程应该被阻塞。但设备中地数据被读走之后，缓冲区中空出部分空间，唤醒被阻塞进程。
    2. 应用程序非阻塞读
	2.1 阻塞方式是文件读写操作的默认方式
	2.2 应用程序可以通过使用O_NONBLOCK标志来人为地设置读写操作为非阻塞方式。
	    在内核源代码include/asm-generic/fcntl.h中定义
	    如果设置了O_NONBLOCK标志，read和write的行为相同。



设备移位操作
    对应lseek和llseek系统调用的设备移位操作为llseek。
    默认允许设备移位操作。
    1. 不支持设备移位操作
	大部分设备提供的都是数据流而不是数据区，比如串口，对于这些设备而言移位操作毫无意义。
	对于不支持设备移位操作的设备，应该通知内核不支持设备移位操作llseek。
	方法：在open操作中调用nonseekable_open()，并指定llseek为no_llseek()。
	1.1 nonseekable_open函数
	    在内核源代码fs/open.c中实现
	    int nonseekable_open(struct inode *inode, struct file *filp);
	1.2 no_llseek函数
	    在内核源代码fs/read_write.c中实现
	    loff_t no_llseek(struct file *filp, loff_t off, int whence);
    2. 支持设备移位操作
	loff_t xxx_llseek(struct file *filp, loff_t off, int whence)
	{
	    loff_t newpos;

	    switch(whence) {
	    case SEEK_SET: //从头开始计算位置
	    case SEEK_CUR: // 从最后一次操作后位置开始计算
	    case SEEK_END: // 从末尾开始计算位置
	    default:
		return -EINVAL;
	    }

	    if( 0 > newpos || newpos > BUFFSIZE ) {
		return -EINVAL;
	    }

	    return newpos;
	}
	read(..., loff_t *f_pos)和write(...,loff_t *f_pos)
	{
	    unsigned int cnt = count;
	    if( BUFFSIZE < (*f_pos + cnt) {
		cnt = BUFFSIZE - *f_pos -1;
	    }

	    ...

	    return cnt;
	}








