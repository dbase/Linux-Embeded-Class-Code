设备模型

sysfs文件系统

kobject结构体
    该结构体实现了基本的面向对象管理机制，它是构成Linux 2.6设备模型的核心数据结构。
    该数据结构与sysfs文件系统联系紧密，在内核中注册的每个kobject对象对应在sysfs文件系统中的一个目录。
    1. kobject数据结构
	在内核源代码include/linux/kobject.h中定义
	struct kobject {
	    const char *name; // 对象名称
	    struct list_head entry; //用于维护所有同类型的kobject对象的链表
	    struct kobject *parent; // 指向可能存在的父对象的指针
	    struct kset *kset; // 对象所属集合
	    struct kobj_type *ktype; //对象类型
	    struct sysfs_dirent *sd; //sysfs文件系统目录入口
	    struct kref fref; // 对象引用计数
	    unsigned int state_initialized:1;
	    unsigned int state_in_sysfs:1;
	    unsigned int state_add_uevent_sent:1;
	    unsigned int state_remove_uevent_sent:1;
	};
    2. kobject结构体操作
	2.1 初始化操作
	    void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
	2.2 注册对象到系统
	    int kobject_add(struct kobject *kobj, struct kobject *parent, const char *fmt, ...);
	2.3 初始化并注册对象
	    int kobject_init_and_add(struct kobject *kobj, struct kobj_type *ktype, struct kobject *parent, const char *fmt, ...);
	2.4 删除对象
	    void kobject_del(struct kobject *kobj);
	2.5 增加引用计数
	    struct kobject *kobject_get(struct kobject *kobj);
	    将kobject对象的引用计数增加1，同时返回该对象指针。
	2.6 减少引用计数
	    struct kobject *kobject_put(struct kobject *kobj);
	    将kobject对象的引用计数减少1，如果引用计数降为0，则调用release方法释放对象。
    3. kobj_type结构体
	在内核源代码include/linux/kobject.h中定义
	struct kobj_type {
	    void (*release)(struct kobject *kobj);
	    struct sysfs_ops *sysfs_ops;
	    struct attribute **default_attrs;
	};
	3.1 release成员
	    用于释放kobject占用的资源，当kobject对象的引用计数为0时被调用
	3.2 sysfs_ops成员
	    sysfs文件系统中文件操作方法的集合
	3.3 default_attrs成员
	    kobject属性指针数组
    4. sysfs_ops结构体
	在内核源代码include/linux/sysfs.h中定义
	4.1 sysfs_ops数据结构
	    struct sysfs_ops {
		ssize_t (*show)(struct kobject *kobj, struct attribute *attr, char *buf);
		ssize_t (*store)(struct kobject *kobj, struct attribute *attr, const char *buf, size_t count);
	    };
	4.2 show成员
	    当用户读属性文件时该函数被调用，该函数将属性值存入buf中返回给用户。
	4.3 store成员
	    当用户写属性文件时该函数被调用，用户存储用户传入的属性值。
    5. attribute结构体
	在内核源代码include/linxu/sysfs.h中定义
	5.1 attribute数据结构
	    struct attribute {
		const char *name;
		struct module *owner;
		mode_t mode;
	    };
	5.2 name成员
	    该属性文件名称
	5.3 owner成员
	    该属性文件拥有者模块
	5.4 mode成员
	    该属性文件的保护位


kset结构体
    kset是具有相同类型的kobject对象集合，在sysfs文件系统中体现为一个目录。
    1. kset数据结构
	在内核源代码include/linux/kobject.h中定义
	struct kset {
	    struct list_head list;
	    spinlock_t list_lock;
	    struct kobject kobj;
	    struct kset_uevent_ops *uevent_ops;
	};
	1.1 list
	    它是连接该kset集合中所有kobject对象的链表头
	1.2 list_lock
	    操作该集合中链表的保护锁
	1.3 kobj
	    集合中内嵌的kobject对象，表示集合本身
	1.4 uevent_ops
	    处理热插拔事件的操作集合
    2. kset操作
	在内核源代码lib/kobject.c中实现
	2.1 初始化
	    void kset_init(struct kset *kset);
	2.2 注册到内核
	    int kset_register(struct kset *kset);
	2.3 创建并注册到内核
	    struct kset *kset_create_and_add(const char *name, struct kset_uevent_ops *u, struct kobject *parent_kobj);
		name:待创建集合的名称
		u:集合支持的热插拔操作的集合
		parent_kobj:集合可能存在的父对象指针
		返回值：创建的kset集合指针
	2.4 注销
	     void kset_unregister(struct kset *kset);
    3. kset_uevent_ops结构体
	3.1 kset_uevent_ops数据结构
	    在内核源代码include/linux/kobject.h中定义
	    struct kset_uevent_ops {
		int (*filter)(struct kset *kset, struct kobject *kobj);
		const char *(*name)(struct kset *kset, struct kobject *kobj);
		int (*uevent)(struct kset *kset, struct kobject *kobject, struct kobj_uevent_env *env);
	    };
	3.2 filter成员
	    该操作决定是否将事件传递到用户空间。如果操作返回0，将不传递事件。
	3.3 name成员
	    该操作将字符串传递给用户空间的热插拔处理程序。
	3.4 uevent成员
	    该操作将用户空间需要的参数添加到环境变量中。



Linux设备模型元素
总线
设备
驱动


总线
    总线是处理器与设备之间的数据传输通道。
    在设备模型中，所有的设备都通过总线相连，甚至是内部的虚拟"Platform"总线。
    1. bus_type数据结构
	在内核源代码include/linux/device.h中定义
	struct bus_type {
	    const char *name; // 总线名称
	    struct bus_attribute *bus_attrs; //总线属性
	    struct device_attribute *dev_attrs; //设备属性
	    struct drvier_attribute *drv_attrs; //驱动属性
	    int (*match)(struct device *dev, struct device_driver *drv);
	    int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
	    ...
	    struct pm_ext_ops *pm; // 电源管理操作集合
	    struct bus_type_private *p;
	};
	1.1 match
	     该方法用于判断指定驱动程序是否能驱动指定的设备。成功返回非0值。
	     当一个新设备或驱动被添加到这条总线时，该方法会被调用。
	1.2 uevent
	    该方法允许总线在内核为用户空间产生热插拔事件之前为系统添加环境变量。
    2. 总线操作
	在内核源代码driver/base/bus.c中实现
	2.1 注册总线
	    该操作将新的总线添加到内核，如果注册成功，在sysfs下的/sys/bus目录下将看到注册的总线。
	    int bus_register(struct bus_type *bus);
	2.2 注销总线
	    该操作从内核中注销一条已经注册总线，同时，从sysfs文件系统/sys/bus目录下删除该总线目录以及下面的所有内容。
	    void bus_unregister(struct bus_type *bus);
    3. bus_attribute结构体
	3.1 bus_attribute数据结构
	    struct bus_attribute {
		struct attribute attr;
		(*show)();
		(*store)();
	    };
	3.2 bus_attribute操作
	    3.2.1 生成总线属性
		int bus_create_file(struct bus_type *bus, struct bus_attribute *attr);
	    3.2.2 移除总线属性
		void bus_remove_file(struct bus_type *bus, struct bus_attribute *attr);
    4. device_attribute结构体
	device_create_file
	device_remove_file
    5. driver_attribute结构体
	driver_create_file
	driver_remove_file
    6. pm_ext_ops结构体
	在内核源代码include/linux/pm.h中定义
    7. bus_type_private结构体
	在内核源代码driver/base/base.h中定义
	struct bus_type_private {
	    struct kset busys; //总线子系统
	    struct kset *drivers_kset; //总线包含的驱动对象集合
	    struct kset *device_kset; //总线包含的设备对象集合
	    struct klist klist_devices;
	    struct klist klist_drivers;
	    struct blocking_nitifier_head bus_notifier; //总线的通知链表
	    unsigned int driver_autoprobe:1; //驱动自动检测标志
	    struct bus_type *bus; // 指向包含该总线的总线结构体指针
	};
    8. 属性声明宏
	在内核源代码include/linux/sysfs.h中定义
	#define __ATTR(_name, _mode, _show, _store) {
	    .attr = {.name = __stringify(_name), .mode = _mode },
	    .show = _show,
	    .store = _store,
	};
	在内核源代码include/linux/device.h中定义
	#define BUS_ATTR(_name, _mode, _show, _store) struct bus_attribute bus_attr_##_name = __ATTR(_name, _mode, _show, _store);
	#define DEVICE_ATTR() struct device_attribute dev_attr_##_name = ...
	#define DRIVER_ATTR()
struct device_attribute driver_attr_##_name = ...


设备
    总线也是设备，必须按照设备注册。
    1. device数据结构
	在内核源代码include/linux/device.h中定义
	struct device {
	    struct klist klist_children; //维护子设备链表
	    struct klist_node knode_parent; //对应父设备的节点
	    struct klist_node knode_driver; // 对应驱动的节点
	    struct klist_node knode_bus; // 对应总线的节点
	    struct device *parent; //父设备的指针

	    struct kobject kobj; // 设备对象
	    char bus_id[BUS_ID_SIZE]; // 在总线上唯一表示该设备的字符串
	    const char *init_name; // 初始设备名称
	    struct device_type *type; // 设备类型
	    unsigned uevent_suppress:1; // uevent禁止位

	    struct semaphore sem; // 同步驱动调用的信号量

	    struct bus_type *bus; //设备所属总线
	    struct device_driver *driver; //管理该设备的驱动
	    void *driver_data; //该设备驱动使用的私有数据
	    void *platfor_data; //平台私有数据
	    ...
	    // 体系结构相关内容
	    struct dev_archdata archdata; //DMA反弹信息
	    spinlock_t devres_lock; // 设备资源操作锁
	    struct list_head devres_head; // 设备资源链表头
	    struct klist_node knode_class; //对应设备类的节点
	    struct class *class; // 设备所属设备类
	    dev_t devt; //设备号
	    struct attribute_group **group; // 可选的设备属性组
	    void (*release)(struct device *drv); // 释放设备操作
	};
    2. 设备操作
	在内核源代码drivers/base/core.c中实现
	2.1 设备初始化
	    void device_initialize(struct device *dev);
	2.2 设备注册
	    int device_register(struct device *dev);
	    {
		device_initialize(dev);
		device_add(dev);
	    }
	    int device_add(struct device *dev);
	2.3 设备注销
	    void device_unregister(struct device *dev);
	    {
		device_del(dev);
		put_device(dev);
	    }
    3. device_type数据结构
	在内核源代码include/linux/device.h中定义
	struct device_type {
	    const char *name; // 设备名称
	    struct attribute_group **group; //可选的设备属性组
	    int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
	    void (*release)(struct device *dev);
	    int (*suspend)(struct device *dev, pm_message_t state);
	    int (*resume)(struct device *dev);
	    struct pm_ops *pm;
	};


驱动
    1. device_driver数据结构
	在内核源代码include/linux/device.h中定义
	struct device_driver {
	    const char *name; //驱动名称
	    struct bus_type *bus; // 驱动所属总线

	    struct module *owner; //驱动模块拥有者
	    const char *mod_name; //通常不用

	    int (*probe)(struct device *dev);
	    int (*remove)(struct device *dev);
	    int (*shutdown)(struct device *dev);
	    int (*suspend)(struct device *dev, pm_message_t state);
	    int (*resume)(struct device *dev);

	    struct attribute_group **groups; // 可选的驱动属性组

	    struct pm_ops *pm;

	    struct driver_private *p;
	};
    2. 驱动操作
	2.1 驱动注册
	    int driver_register(struct device_driver *drv);
	2.2 驱动注销
	    void driver_unregister(struct device_driver *drv);
    3. driver_private数据结构
	在内核源代码driver/base/base.h中定义
	struct driver_private {
	    struct kobject kobj; // 驱动对象
	    struct klist klist_devices; //驱动所管理的设备链表
	    struct klist_node knode_bus; //驱动对应总线的节点
	    struct module_kobject *mkobj; //模块对象
	    struct device_driver *driver; // 指向驱动的指针
	};







